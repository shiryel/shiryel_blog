<!DOCTYPE html><html lang="en"><head><title>Shiryel's Blog</title><link href="images/favicon-128.png" rel="icon" type="image/png"><meta charset="UTF-8"><meta content="width=device-width, initial-scale=1.0" name="viewport"><meta content="A reminder on how to use only one certificate with certbot and nginx with the minimum of enfort" name="description"><meta content="certbot, nginx" name="keywords"><meta content="How to use only one certificate with certbot and nginx" name="og:title"><meta content="A reminder on how to use only one certificate with certbot and nginx with the minimum of enfort" name="og:description"><meta content="article" name="og:type"><meta content="https://blog.shiryel.com/images/logo-512.png" name="og:image"><meta content="summary" name="twitter:card"><meta content="@shiryel_" name="twitter:site"><meta content="@shiryel_" name="twitter:creator"><link rel="stylesheet" media=all href="/css/prism.min.css" />
<link rel="stylesheet" media=all href="/css/reset-7ZRpbfeygfJQle-Usm3DWw==.css" />
</head><body><div class="content"><a href="/">Back</a><h1 class="post">How to use only one certificate with certbot and nginx</h1><p class="date">2020-07-23</p><p>This is more a reminder for myself but anyway</p>

<p>First, you need to generate the certificate with the certbot on the AWS, you need to put both the www and non-www url, otherwise the redirect will be invalid or the website will display a invalid certificate</p>

<pre><code class="language-bash">  sudo certbot  -d shiryel.com -d www.shiryel.com -d blog.shiryel.com -d www.blog.shiryel.com -d webrtc.shiryel.com -d www.webrtc.shiryel.com
</code></pre>

<p>Then, you need a Nginx like this:</p>

<pre><code class="language-nginx"># For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
        &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
        &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type text/plain;

    ###########
    # CERTBOT #
    ###########

  ssl_certificate /etc/letsencrypt/live/shiryel.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/shiryel.com/privkey.pem; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    # Automatic important security parameters (provided by certbot)
    include /etc/letsencrypt/options-ssl-nginx.conf;

    #################
    # ENFORCE HTTPS #
    #################

    server {
        listen 80 default_server;
        server_name _;
    
        return 301 https://$host$request_uri;
    }

    ########
    # HOME #
    ########

    # Dont have non-www because the DNS redirect to WWW
    server {
        server_name www.shiryel.com;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        location / {
            root /www/shiryel;
            index shiryel.html;
        }
    }

    ##########
    # WEBRTC #
    ##########

    upstream docker-webrtc {
        server 0.0.0.0:5001;
    }

    upstream docker-webrtc-server {
        server 0.0.0.0:4001;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        &#39;&#39;      close;
    }

    server {
        server_name www.webrtc.shiryel.com;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        return 301 $scheme://webrtc.shiryel.com/$request_uri;
    }

    server {
        server_name webrtc.shiryel.com;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        location / {
            proxy_pass         http://docker-webrtc;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }

    server {
        server_name webrtc-server.shiryel.com www.webrtc-server.shiryel.com;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        location / {
            proxy_pass         http://docker-webrtc-server;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection $connection_upgrade;
        }
    }

    ########
    # BLOG #
    ########

    server {
        server_name www.blog.shiryel.com;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        return 301 $scheme://blog.shiryel.com/$request_uri;
    }

    server {
        server_name blog.shiryel.com;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        location / {
            root /www/shiryel_blog;
        }
    }
}
</code></pre>

<p>Yes, good luck with the nginx file, I alread have a bad time learning all this shit :)</p>
<br /><a href="/">Back</a><style type="text/css">h1.post {
  text-align: center;
  margin-top: 1em;
}

p.date {
  text-align: center;
  margin-bottom: 2em;
}</style></div><footer><p><a href="https://github.com/shiryel/shiryel-blog" rel="noopener noreferrer" target="_blank">Hosted on Github</a></p><p>Copyright &copy; Shiryel</p><p><a href="https://github.com/still-ex/still" rel="noopener noreferrer" target="_blank">Made with Still</a></p></footer><style type="text/css">footer {
  display: flex;
  gap: 25px;
  text-align: center;
}</style></body><script  src="/js/prism.min.js"></script>
</html><style type="text/css">body {
  display: flex;
  flex-direction: column;
  align-items: center;
  color: #FBFBFBba;
  background-image: radial-gradient(
    circle at center center,
    transparent 0%,
    rgb(33, 33, 33) 99%
    ),
    repeating-linear-gradient(
    0deg,
    rgba(163, 163, 163, 0.2) 0px,
    rgba(163, 163, 163, 0.2) 1px,
    transparent 1px,
    transparent 30px
    ),
    repeating-linear-gradient(
    90deg,
    rgba(163, 163, 163, 0.2) 0px,
    rgba(163, 163, 163, 0.2) 1px,
    transparent 1px,
    transparent 30px
    ),
    linear-gradient(90deg, rgb(33, 33, 33), rgb(33, 33, 33));
}

.content {
  background-color: #080A12;
  border-radius: 3px;
  padding: 20px;
  width: 90vw;
  max-width: 1000px;
}

@media (min-width: 768px) {
  .content{
    margin-top: 30px;
    padding: 30px 40px;
    min-height: 700px;
  }
}</style>